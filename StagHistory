import csv
import os
from bs4 import BeautifulSoup as bs
import re
import requests

#leagueID = input("Enter League ID: ")
#league_name = input("League Name: ")
leagueID = '864504'
league_name = 'The Stag Brotherhood'
seasons_input = input("Enter Seasons (comma separated, e.g. 2017,2018,2019): ")
seasons = [season.strip() for season in seasons_input.split(',')]


def get_numberofowners(season):
    owners_url = 'https://fantasy.nfl.com/league/' + leagueID + '/history/' + season + '/owners'
    owners_page = requests.get(owners_url)
    owners_html = owners_page.text
    owners_soup = bs(owners_html, 'html.parser')
    try:
        number_of_owners = len(owners_soup.find_all('tr', class_=re.compile('team-')))
    except AttributeError:
        print(f"Error processing owners_soup for team ID {teamId}")
        number_of_owners = 0
    return number_of_owners

for season in seasons:

    number_of_owners = get_numberofowners(season)


def get_longest_bench(week):
    longest_bench_data = [0, 0]
    for i in range(1, number_of_owners + 1):
        try:
            page = requests.get(f'https://fantasy.nfl.com/league/{leagueID}/history/{season}/teamgamecenter?teamId={i}&week={week}')
            soup = bs(page.text, 'html.parser')
            bench_div = soup.find('div', id='tableWrapBN-1')
            if bench_div:
                bench_length = len(bench_div.find_all('td', class_='playerNameAndInfo'))
            else:
               bench_length = 0
            bench_length = len(soup.find('div', id='tableWrapBN-1').find_all('td', class_='playerNameAndInfo'))
            if bench_length > longest_bench_data[0]:
                longest_bench_data = [bench_length, i]
        except Exception as e:
            print(f'Error for team ID {i}:', e)
            continue
    return longest_bench_data

def is_final_game(teamId, week, playoff_teams, playoff_placements, final_week_of_playoffs):
    if teamId in playoff_teams:
        return True  # If the team is in the playoffs, every game is considered their 'final'
    elif week == final_week_of_playoffs:
        return True  # If it's the last week of the season and the team didn't make it to the playoffs, it's their final game
    return False



def determine_playoff_placements(playoff_teams):
    """
    Determine the playoff placements based on the list of playoff teams.
    This function assumes that the playoff teams are ordered by their elimination.
    """
    placements = {}
    
    if len(playoff_teams) == 4:
        placements[playoff_teams[-2]] = {"placement": "2nd", "round_eliminated": 2}
        placements[playoff_teams[-1]] = {"placement": "1st", "round_eliminated": 2}
        placements[playoff_teams[-4]] = {"placement": "4th", "round_eliminated": 1}
        placements[playoff_teams[-3]] = {"placement": "3rd", "round_eliminated": 2}
    elif len(playoff_teams) == 6:
        placements[playoff_teams[-2]] = {"placement": "2nd", "round_eliminated": 3}
        placements[playoff_teams[-1]] = {"placement": "1st", "round_eliminated": 3}
        placements[playoff_teams[-4]] = {"placement": "4th", "round_eliminated": 2}
        placements[playoff_teams[-3]] = {"placement": "3rd", "round_eliminated": 3}
        placements[playoff_teams[-6]] = {"placement": "6th", "round_eliminated": 1}
        placements[playoff_teams[-5]] = {"placement": "5th", "round_eliminated": 2}

    return placements


def get_header():
    positions = ['QB', 'RB1', 'RB2', 'WR1', 'WR2', 'TE', 'Flex', 'K', 'DEF']
    bench_positions = ['BN' + str(i) for i in range(1, 7)]
    
    header = ['Team_Name', 'Owner', 'Rank']
    
    for position in positions + bench_positions:
        header.extend([position, f'Points_{position}'])
    
    header.extend(['Total', 'Opponent', 'Opponent_Total', 'Playoff Flag', 'Final Placement', 'Round Eliminated', 'Playoff Round', 'Playoff Placement'])
    
    if season == '2022':  # Replace 'YearWith3WRs' with the actual year
        header.insert(header.index('TE'), 'WR3')
        header.insert(header.index('Points_TE'), 'Points_WR3')
    
    return header

def get_final_standings(season):
    """
    Fetch the final regular season standings for all teams.
    """
    standings_url = f'https://fantasy.nfl.com/league/{leagueID}/history/{season}/standings'
    page = requests.get(standings_url)
    soup = bs(page.text, 'html.parser')
    
    teams_elements = soup.find_all('a', class_=re.compile('teamName teamId-'))
    standings = {}
    
    for idx, team_element in enumerate(teams_elements, 1):
        team_id = team_element['class'][1].split('-')[1]
        standings[team_id] = f'{idx}th'  # Adjust ordinal suffix (1st, 2nd, 3rd, etc.) if needed

    return standings


def get_playoff_teams(season):
    url = f'https://fantasy.nfl.com/league/{leagueID}/history/{season}/playoffs?bracketType=championship&standingsTab=playoffs'
    page = requests.get(url)
    soup = bs(page.text, 'html.parser')
    playoff_teams_elements = soup.find_all('a', class_=re.compile('teamName teamId-'))
    playoff_teams = list(set([team['class'][1].split('-')[1] for team in playoff_teams_elements]))
    return playoff_teams

def get_playoff_rounds(num_teams):
    if num_teams == 4:
        return 2
    elif num_teams == 6:
        return 3
    elif num_teams == 8:
        return 3
    elif num_teams == 10:
        return 4
    else:
        return 0  # Handle cases where the number of teams doesn't match expected values

# Define the is_playoff_week function
def is_playoff_week(season, week_number):
    """Check if a given week is a playoff week."""
    url = f'https://fantasy.nfl.com/league/{leagueID}/history/{season}/playoffs?bracketType=championship&standingsTab=playoffs&week={week_number}'
    page = requests.get(url)
    soup = bs(page.text, 'html.parser')
    matches = soup.select('.teamsWrap')
    return bool(matches)




def getrow(teamId, week, longest_bench, playoff_teams, playoff_placements, final_week_of_playoffs, final_standings, is_playoff_week=False):
    game_id = f"{season}{week.zfill(2)}{teamId.zfill(2)}"
    page = requests.get(f'https://fantasy.nfl.com/league/{leagueID}/history/{season}/teamgamecenter?teamId={teamId}&week={week}')
    soup = bs(page.text, 'html.parser')

    if teamId in playoff_placements:
        final_placement = playoff_placements.get(teamId, {"placement": "Unknown"})["placement"]
        round_eliminated = playoff_placements[teamId]["round_eliminated"]
    else:
        print(f"Warning: Team {teamId} made the playoffs but has no entry in playoff_placements!")

    if teamId in playoff_teams:
        if teamId not in playoff_placements:
            print(f"Warning: Team {teamId} made the playoffs but has no entry in playoff_placements!")
            final_placement = None
        else:
            final_placement = playoff_placements[teamId]["placement"]
        
    # Fetching team name
    team_name_element = soup.find('a', class_=re.compile('teamName teamId-'))
    team_name = team_name_element.text if team_name_element else 'Unknown'

    starters_div = soup.find('div', id='tableWrap-1')
    if starters_div:
        starters = starters_div.find_all('td', class_='playerNameAndInfo')
        starters = [starter.text.strip() for starter in starters]
    else:
        starters = []

    bench_div = soup.find('div', id='tableWrapBN-1')
    if bench_div:
        bench = bench_div.find_all('td', class_='playerNameAndInfo')
        bench = [benchplayer.text.strip() for benchplayer in bench]
    else:
        bench = []

    owner_element = soup.find('span', class_='userName')
    if owner_element is None:
        print(f'Error fetching owner for team ID {teamId} during week {week}')
        owner = 'Unknown'
    else:
        owner = owner_element.text.strip()

    while len(bench) < longest_bench:
        bench.append('-')

    roster = starters + bench

    player_totals_div = soup.find('div', id='teamMatchupBoxScore')
    if player_totals_div:
        player_totals_div = player_totals_div.find('div', class_='teamWrap teamWrap-1')
        if player_totals_div:
            player_totals = player_totals_div.find_all('td', class_=re.compile("statTotal"))
            player_totals = [player.text.strip() for player in player_totals]
        else:
            player_totals = []
    else:
        player_totals = []

    # Extract opponent's name

    opponent_div = soup.find('div', class_='teamWrap teamWrap-2')
    if opponent_div:
        opponent_name_element = opponent_div.find('span', class_='userName')
        opponent_name = opponent_name_element.text if opponent_name_element else 'Unknown'

        opponent_total_div = opponent_div.find('div', class_=re.compile('teamTotal teamId-'))
        opponent_total = opponent_total_div.text.strip() if opponent_total_div else '-'
    else:
        opponent_name = 'Unknown'
        opponent_total = '-'

    teamtotals = soup.findAll('div', class_=re.compile('teamTotal teamId-'))

    ranktext_element = soup.find('span', class_=re.compile('teamRank teamId-'))
    if ranktext_element:
        ranktext = ranktext_element.text
        rank = ranktext[ranktext.index('(') + 1: ranktext.index(')')]
    else:
        rank = 'Unknown'

    rosterandtotals = []
    for idx, player in enumerate(roster):
        rosterandtotals.append(player)
        try:
            rosterandtotals.append(player_totals[idx])
        except IndexError:
            rosterandtotals.append('-')
    
    try:
        opponent_name_element = soup.find('div', class_='teamWrap teamWrap-2').find('span', class_='userName')
        if opponent_name_element:
            opponent_name = opponent_name_element.text.strip()
        else:
            opponent_name = '-'
    except AttributeError:
        opponent_name = '-'
       
    # Check if it's the final game for this team
    is_final = is_final_game(teamId, week, playoff_teams, playoff_placements, final_week_of_playoffs)

    # Check if the team was in playoffs
    if teamId in playoff_teams:
        if is_final:
            final_placement = playoff_placements.get(teamId, {"placement": "Unknown"})["placement"]
            
            # If they did not win the championship, they were eliminated in the last week they played
            if final_placement != "1st":
                round_eliminated = int(week)
            
            playoff_round = int(week) - int(playoff_start_week) + 1
            playoff_place = playoff_placements.get(teamId, {"placement": "Unknown"})["placement"]
        else:
            print(f"Warning: Team {teamId} made the playoffs but has no entry in playoff_placements!")
    elif is_final:  # If it's the final game for a team not in the playoffs
        final_placement = final_standings.get(teamId, "Did Not Qualify")
    
    # Handle playoff and final placements
    if teamId in playoff_teams:
        final_placement = playoff_placements.get(teamId, {"placement": "Unknown"})["placement"]
        
        if is_final:
            if final_placement != "1st":
                round_eliminated = int(week)
            playoff_round = int(week) - int(playoff_start_week) + 1 if playoff_start_week else None
        else:
            round_eliminated = None
            playoff_round = None
        playoff_place = playoff_placements.get(teamId, {"placement": "Unknown"})["placement"]
    elif is_final:
        final_placement = final_standings.get(teamId, "Did Not Qualify")
        round_eliminated = None
        playoff_round = None
        playoff_place = None
    else:
        final_placement = None
        round_eliminated = None
        playoff_round = None
        playoff_place = None

    playoff_flag = 1 if is_playoff_week else 0

    # Construct the row
    completed_row = [team_name, owner, rank] + rosterandtotals + [teamtotals[0].text.strip() if teamtotals else '-', opponent_name, opponent_total, None, playoff_flag, final_placement, round_eliminated, playoff_round, playoff_place]
 
    # Debugging print statements
    print(f"Team ID: {teamId}, Week: {week}")
    print(f"Playoff Flag: {playoff_flag}")
    print(f"Final Placement: {final_placement}")
    print(f"Round Eliminated: {round_eliminated}")
    print(f"Playoff Round: {playoff_round}")
    print(f"Playoff Place: {playoff_place}")

    print(f"Processed Game ID: {game_id}")
    return completed_row, game_id

if not os.path.isdir('./' + league_name + '-League-History'):
    if input('No folder named ' + league_name + '-League-History found would you like to create a new folder with that name y/n?') == 'y':
        os.mkdir('./' + league_name + '-League-History')
    else:
        exit()

# determine playoff teams + rounds
playoff_teams = get_playoff_teams(season)
print(f"For season {season}, detected playoff teams are: {playoff_teams}")
num_playoff_rounds = get_playoff_rounds(len(playoff_teams))
playoff_placements = determine_playoff_placements(playoff_teams)

def get_teams_from_bracket(season, bracket_type="championship"):
    url = f'https://fantasy.nfl.com/league/{leagueID}/history/{season}/playoffs?bracketType={bracket_type}&standingsTab=playoffs'
    page = requests.get(url)
    soup = bs(page.text, 'html.parser')
    
    if bracket_type == "championship" and season == "2018":
        # Get only the Week 16 matchups for the championship bracket
        weeks = soup.select('.pw-2 .teamsWrap')
        teams_elements = []
        for week in weeks:
            teams_elements.extend(week.find_all('a', class_=re.compile('teamName teamId-')))
    else:
        teams_elements = soup.find_all('a', class_=re.compile('teamName teamId-'))

    teams = [team['class'][1].split('-')[1] for team in teams_elements]
    return teams

def determine_championship_placements_2017(playoff_teams):
    first_place = playoff_teams[-2]
    second_place = playoff_teams[-1]
    third_place = playoff_teams[-4]
    fourth_place = playoff_teams[-3]
    
    return {
        first_place: "1st",
        second_place: "2nd",
        third_place: "3rd",
        fourth_place: "4th"
    }

def determine_championship_placements_2018(url):
    try:
        page_content = requests.get(url).text  # Fetch the content
        soup = bs(page_content, 'html.parser')
        weeks = soup.select('.pw-2 .teamsWrap')  # Week 16 matchups
        print("Number of weeks in championship:", len(weeks))
        first_place, second_place = determine_winner_loser(weeks[0])
        third_place, fourth_place = determine_winner_loser(weeks[1])
        fifth_place, sixth_place = determine_winner_loser(weeks[2])
        
        return {
            first_place: "1st",
            second_place: "2nd",
            third_place: "3rd",
            fourth_place: "4th",
            fifth_place: "5th",
            sixth_place: "6th"
        }
    except Exception as e:
        print(f"Error while extracting championship placements: {e}")
        return {}


def determine_winner_loser(match):
    teams_elements = match.find_all('a', class_=re.compile('teamName teamId-'))
    
    # If there are no teams in this matchup, return None for both winner and loser
    if not teams_elements:
        return None, None
    
    teams = [team['class'][1].split('-')[1] for team in teams_elements]
    scores = [float(score.get_text()) for score in match.find_all('div', class_=re.compile('teamTotal teamId-')) if score.get_text().replace('.', '', 1).isdigit()]
    
    if not scores or len(teams) < 2 or "BYE" in [team.get_text() for team in match.find_all('div', class_='nameWrap')]:
        return None, None
    
    winner, loser = (teams[0], teams[1]) if scores[0] > scores[1] else (teams[1], teams[0])
    return winner, loser


def determine_num_teams(soup):
    byes = soup.select('.pw-0 .teamWrap-bye')
    num_byes = len(byes)
    if num_byes == 2:
        return 10
    elif num_byes == 4:
        return 12
    else:
        print(f"Unexpected number of byes: {num_byes}")
        return None

def extract_championship_placements(soup):
    weeks = soup.select('.pw-2 .teamsWrap')
    placements = {}
    
    if len(weeks) == 4:  # Assuming 6-team playoff structure
        # Finals
        winner, loser = determine_winner_loser(weeks[0])
        placements[winner] = "1"
        placements[loser] = "2"
        
        # 3rd and 4th place
        winner, loser = determine_winner_loser(weeks[1])
        placements[winner] = "3"
        placements[loser] = "4"
        
        # 5th and 6th place
        winner, loser = determine_winner_loser(weeks[2])
        placements[winner] = "5"
        placements[loser] = "6"
    else:
        # This handles the other playoff structure
        teams = [team['class'][1].split('-')[1] for team in soup.find_all('a', class_=re.compile('teamName teamId-'))]
        placements[teams[-2]] = "1"
        placements[teams[-1]] = "2"
        placements[teams[-4]] = "3"
        placements[teams[-3]] = "4"
        
    return placements


def extract_consolation_placements_from_html(soup, num_teams):
    consolation_placements = {}
    
    # Extract games from the consolation bracket
    consolation_games = soup.select('.pw-2 .pg-0, .pw-2 .pg-1, .pw-2 .pg-2, .pw-1 .pg-0, .pw-1 .pg-1, .pw-0 .pg-0, .pw-0 .pg-1')
    for game in consolation_games:
        game_title = game.h5.text.strip()
		
        winner, loser = determine_winner_loser(game)
		
        if not winner or not loser:
            continue
			
        if "7th Place Game" in game_title:
            consolation_placements[7] = winner
            consolation_placements[8] = loser
        elif "9th Place Game" in game_title:
            consolation_placements[9] = winner
            consolation_placements[10] = loser
        elif "11th Place Game" in game_title:
            consolation_placements[11] = winner
            consolation_placements[12] = loser
        elif "5th Place Game" in game_title:
            consolation_placements[5] = winner
            consolation_placements[6] = loser

            
    # Handle cases where there's no specific game but the teams are determined based on the structure
    if num_teams == 10:
        all_teams = set(range(1, 11))
        placed_teams = set(consolation_placements.values())
        unplaced_teams = list(all_teams - placed_teams)
        if 5 not in consolation_placements:
            consolation_placements[5] = unplaced_teams[0]
        if 6 not in consolation_placements:
            consolation_placements[6] = unplaced_teams[1]
    
    # Sort by placement
    sorted_consolation = dict(sorted(consolation_placements.items()))
    
    return sorted_consolation

def extract_final_placements(season):
    """Extract the final placements for both championship and consolation brackets."""
    url_championship = f'https://fantasy.nfl.com/league/{leagueID}/history/{season}/playoffs?bracketType=championship&standingsTab=playoffs'
    url_consolation = f'https://fantasy.nfl.com/league/{leagueID}/history/{season}/playoffs?bracketType=consolation&standingsTab=playoffs'
    
    # Fetch the HTML content of the championship bracket
    html_content = requests.get(url_championship).text
    soup = bs(html_content, 'html.parser')
    championship_placements = extract_championship_placements(soup)

    # Fetch the HTML content of the consolation bracket
    html_content = requests.get(url_consolation).text
    soup = bs(html_content, 'html.parser')
    consolation_placements = extract_consolation_placements_from_html(soup, season)

    # Return only two dictionaries
    print (championship_placements, consolation_placements)
    return championship_placements, consolation_placements

def test_playoff_detection():
    for season in seasons:
        print(f"\nFor season {season}:")
        
        # Determine playoff weeks
        print("Playoff Weeks:")
        for week in range(14, 18):  # Typical playoff weeks are from Week 14 to Week 17
            if is_playoff_week(season, week, num_playoff_rounds):
                print(f"Week {week} is a playoff week.")
            else:
                print(f"Week {week} is not a playoff week.")
        
        # Extract and print final placements
        championship_placements, consolation_placements = extract_final_placements(season)
        
        print("\nChampionship Bracket Placements:")
        for team, place in sorted(championship_placements.items(), key=lambda x: int(x[1].replace('st', '').replace('nd', '').replace('rd', '').replace('th', ''))):
            print(f"{place.replace('st', '').replace('nd', '').replace('rd', '').replace('th', '')}: Team {team}")
        
        print("\nConsolation Bracket Placements:")
        starting_rank = len(championship_placements) + 1
        for rank, teamId in enumerate(sorted(consolation_placements.values(), key=int), start=starting_rank):
            print(f"{rank}: Team {teamId}")
        print("---")

for season in seasons:    
    path = './' + league_name + '-League-History/' + season
    if not os.path.isdir(path):
        os.mkdir(path)

    # Determine playoff weeks
    playoff_weeks = [week for week in range(14, 18) if is_playoff_week(season, week)]
    print(f"Playoff weeks for season {season}: {playoff_weeks}")
    
    # Extract final placements
    championship_placements, consolation_placements = extract_final_placements(season)
    print(f"Championship placements for season {season}: {championship_placements}")
    print(f"Consolation placements for season {season}: {consolation_placements}")
    
    # Determine the season_length
    page = requests.get('https://fantasy.nfl.com/league/' + leagueID + '/history/' + season + '/teamgamecenter?teamId=1&week=1')
    soup = bs(page.text, 'html.parser')
    season_length = len(soup.find_all('li', class_=re.compile('ww ww-')))
    print(f"Season length for {season}: {season_length} weeks")
    final_week_of_playoffs = season_length  # If playoffs always end on the last week of the season

    # Get the number of owners for the current season
    number_of_owners = get_numberofowners(season)

    # Determine playoff teams + rounds
    playoff_teams = get_playoff_teams(season)
    final_standings = get_final_standings(season)

    # Define the header using data from the first week
    longest_bench_initial = get_longest_bench(1)
    header = get_header()

    # Determine playoff teams + rounds
    playoff_teams = get_playoff_teams(season)
    num_playoff_rounds = get_playoff_rounds(len(playoff_teams))

    if num_playoff_rounds:
        playoff_start_week = season_length - num_playoff_rounds + 1
    else:
        playoff_start_week = None

    # Open the consolidated CSV for writing
    with open('./' + league_name + '-League-History/' + season + '/Consolidated_Season_Data.csv', 'w', newline='') as consolidated_csv:
        writer = csv.writer(consolidated_csv)
        writer.writerow(['Game ID', 'Week', 'Season'] + header)  # Added 'Game ID' to the header row

        
        for i in range(1, season_length + 1):
            longest_bench = get_longest_bench(i)
            
        # Inside the for loop where rows are written:
            for j in range(1, number_of_owners + 1):
                row_data, game_id = getrow(str(j), str(i), longest_bench[0], playoff_teams, playoff_placements, final_week_of_playoffs, final_standings)
                if row_data[0] != 'Unknown' and row_data[1] != 'Unknown':  # Check if Owner and Rank fields are valid
                    writer.writerow([game_id] + [str(i), season] + row_data)
                # print(f"Written data for game ID {game_id}: {[str(i), season] + row_data}")

            print(f"Week {i} Complete for Season {season}")


print("Done")
